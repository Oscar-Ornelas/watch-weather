{"version":3,"sources":["components/WeatherCard.js","components/WeatherTab.js","App.js","index.js"],"names":["WeatherCard","props","onClick","getCurrentDay","index","className","day","maxTemperature","minTemperature","src","imageUrl","WeatherTab","city","weatherType","weatherImage","temperature","humidity","wind","App","useState","location","setLocation","weatherInfo","setWeatherInfo","currentDay","setCurrentDay","useEffect","window","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","fetch","process","then","response","json","data","results","components","stateCode","state_code","countryCode","country_code","daily","getWeatherInfo","weatherCards","map","i","dayOfWeek","Date","dt","toGMTString","substring","key","temp","max","min","weather","icon","date","getDay","getDayOfWeek","main","toString","split","wind_speed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50d3228b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction WeatherCard(props) {\r\n\r\n  function onClick() {\r\n    props.getCurrentDay(props.index);\r\n  }\r\n\r\n  return (\r\n    <section onClick={onClick} className=\"weather-card\">\r\n      <p className=\"weather-card-day\">{props.day}</p>\r\n      <div className=\"weather-card-temperatures\">\r\n        <p className=\"weather-card-max-temperature\">{props.maxTemperature}&#176;</p>\r\n        <p className=\"weather-card-min-temperature\">{props.minTemperature}&#176;</p>\r\n      </div>\r\n      <img src={props.imageUrl} className=\"weather-card-image\"/>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React from 'react';\r\n\r\nfunction WeatherTab(props) {\r\n  return (\r\n    <section className=\"weather-tab\">\r\n      <div className=\"weather-tab-general\">\r\n        <h3 className=\"weather-tab-city\">{props.city}</h3>\r\n        <p className=\"weather-tab-day\">{props.day}</p>\r\n        <p className=\"weather-tab-type\">{props.weatherType}</p>\r\n      </div>\r\n      <div className=\"weather-tab-main\">\r\n        <div className=\"weather-tab-description\">\r\n          <img className=\"weather-tab-image\" src={props.weatherImage}/>\r\n          <h2 className=\"weather-tab-temp\">{props.temperature}</h2>\r\n          <i>&#176;F</i>\r\n        </div>\r\n        <div className=\"weather-tab-side\">\r\n          <p className=\"weather-tab-info\">Humidity: {props.humidity}%</p>\r\n          <p className=\"weather-tab-info\">Wind: {props.wind} mph</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default WeatherTab;\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport WeatherCard from './components/WeatherCard';\nimport WeatherTab from './components/WeatherTab';\n\nfunction App() {\n  const WEATHER_MAP_API_KEY = process.env.REACT_APP_OPEN_WEATHER_MAP_API_KEY;\n  const OPENCAGE_API_KEY = process.env.REACT_APP_OPENCAGE_API_KEY;\n  const [location, setLocation] = useState({});\n  const [weatherInfo, setWeatherInfo]  = useState([]);\n  const [currentDay, setCurrentDay] = useState(null);\n\n  useEffect(() => {\n    if(window.navigator.geolocation) {\n      window.navigator.geolocation\n      .getCurrentPosition(position => {\n        getLocation(position.coords.latitude, position.coords.longitude);\n        getWeatherInfo(position.coords.latitude, position.coords.longitude);\n      });\n    }\n  }, []);\n\n  function getWeatherInfo(latitude, longitude) {\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={current,minutely,hourly}&units=imperial&appid=${WEATHER_MAP_API_KEY}`)\n    .then(response => response.json())\n    .then(data => {\n      setWeatherInfo(data.daily);\n      setCurrentDay(data.daily[0]);\n    })\n  }\n\n  function getLocation(latitude, longitude) {\n    fetch(`https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPENCAGE_API_KEY}`)\n    .then(response => response.json())\n    .then(data => {\n      const location = data.results[0].components;\n      setLocation({city: location.city, stateCode: location.state_code, countryCode: location.country_code})\n    })\n  }\n\n  function getCurrentDay(index) {\n    setCurrentDay(weatherInfo[index]);\n  }\n\n  function getDayOfWeek(currentDay) {\n    const date = new Date(currentDay.dt * 1000).getDay();\n\n    if(date === 0) {\n      return \"Sunday\";\n    } else if(date === 1) {\n      return \"Monday\";\n    } else if(date === 2) {\n      return \"Tuesday\";\n    } else if(date === 3) {\n      return \"Wednesday\";\n    } else if(date === 4) {\n      return \"Thursday\";\n    } else if(date === 5) {\n      return \"Friday\";\n    } else if(date === 6) {\n      return \"Saturday\";\n    }\n\n  }\n\n  const weatherCards = (weatherInfo && currentDay) && (\n    weatherInfo.map((day, i) => {\n      const date = new Date(day.dt * 1000).toGMTString();\n      const dayOfWeek = date.substring(0, 3);\n\n      return (\n        <WeatherCard\n          getCurrentDay={getCurrentDay}\n          key={i}\n          index={i}\n          day={dayOfWeek}\n          maxTemperature={day.temp.max}\n          minTemperature={day.temp.min}\n          imageUrl={`http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`}\n        />\n      )\n    })\n  )\n\n  return (\n    <div className=\"app\">\n      {currentDay !== null && (\n        <WeatherTab\n          city={`${location.city}, ${location.stateCode}`}\n          day={getDayOfWeek(currentDay)}\n          weatherType={currentDay.weather[0].main}\n          weatherImage={`http://openweathermap.org/img/wn/${currentDay.weather[0].icon}@2x.png`}\n          temperature={currentDay.temp.day.toString().split('.')[0]}\n          humidity={currentDay.humidity}\n          wind={currentDay.wind_speed}\n        />\n      )}\n\n      <section className=\"weather-card-container\">\n        {weatherCards}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}